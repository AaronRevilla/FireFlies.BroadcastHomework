package com.example.aaron.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.aaron.greendao.db.PhoneStatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHONE_STATUS".
*/
public class PhoneStatusDao extends AbstractDao<PhoneStatus, Long> {

    public static final String TABLENAME = "PHONE_STATUS";

    /**
     * Properties of entity PhoneStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsPowerOn = new Property(1, Boolean.class, "isPowerOn", false, "IS_POWER_ON");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property Latitud = new Property(3, Double.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(4, Double.class, "longitud", false, "LONGITUD");
        public final static Property LocationProvider = new Property(5, String.class, "locationProvider", false, "LOCATION_PROVIDER");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property UsbCharge = new Property(7, Boolean.class, "usbCharge", false, "USB_CHARGE");
        public final static Property AcCharge = new Property(8, Boolean.class, "acCharge", false, "AC_CHARGE");
        public final static Property BatteryLevel = new Property(9, Integer.class, "batteryLevel", false, "BATTERY_LEVEL");
        public final static Property BateryLevelScale = new Property(10, Integer.class, "bateryLevelScale", false, "BATERY_LEVEL_SCALE");
        public final static Property BatteryPtc = new Property(11, Float.class, "batteryPtc", false, "BATTERY_PTC");
    };


    public PhoneStatusDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHONE_STATUS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IS_POWER_ON\" INTEGER," + // 1: isPowerOn
                "\"DATE\" INTEGER," + // 2: date
                "\"LATITUD\" REAL," + // 3: latitud
                "\"LONGITUD\" REAL," + // 4: longitud
                "\"LOCATION_PROVIDER\" TEXT," + // 5: locationProvider
                "\"ADDRESS\" TEXT," + // 6: address
                "\"USB_CHARGE\" INTEGER," + // 7: usbCharge
                "\"AC_CHARGE\" INTEGER," + // 8: acCharge
                "\"BATTERY_LEVEL\" INTEGER," + // 9: batteryLevel
                "\"BATERY_LEVEL_SCALE\" INTEGER," + // 10: bateryLevelScale
                "\"BATTERY_PTC\" REAL);"); // 11: batteryPtc
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHONE_STATUS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhoneStatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean isPowerOn = entity.getIsPowerOn();
        if (isPowerOn != null) {
            stmt.bindLong(2, isPowerOn ? 1L: 0L);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        Double latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindDouble(4, latitud);
        }
 
        Double longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindDouble(5, longitud);
        }
 
        String locationProvider = entity.getLocationProvider();
        if (locationProvider != null) {
            stmt.bindString(6, locationProvider);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        Boolean usbCharge = entity.getUsbCharge();
        if (usbCharge != null) {
            stmt.bindLong(8, usbCharge ? 1L: 0L);
        }
 
        Boolean acCharge = entity.getAcCharge();
        if (acCharge != null) {
            stmt.bindLong(9, acCharge ? 1L: 0L);
        }
 
        Integer batteryLevel = entity.getBatteryLevel();
        if (batteryLevel != null) {
            stmt.bindLong(10, batteryLevel);
        }
 
        Integer bateryLevelScale = entity.getBateryLevelScale();
        if (bateryLevelScale != null) {
            stmt.bindLong(11, bateryLevelScale);
        }
 
        Float batteryPtc = entity.getBatteryPtc();
        if (batteryPtc != null) {
            stmt.bindDouble(12, batteryPtc);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PhoneStatus readEntity(Cursor cursor, int offset) {
        PhoneStatus entity = new PhoneStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // isPowerOn
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // latitud
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // longitud
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // locationProvider
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // usbCharge
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // acCharge
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // batteryLevel
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // bateryLevelScale
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11) // batteryPtc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhoneStatus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsPowerOn(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setLatitud(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLongitud(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setLocationProvider(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUsbCharge(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setAcCharge(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setBatteryLevel(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBateryLevelScale(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setBatteryPtc(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PhoneStatus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PhoneStatus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
